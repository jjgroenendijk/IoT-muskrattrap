#include "TheThingsNetwork_HANIoT.h"
#include "HAN_IoT_Shield.h"
#include "secrets.h"
#include "encoder.h"
#include "decoder.h"
#include "IOTShieldConfig.h"

const char *devEui = DEVEUI;  ///< devEUI to be generated by TTN Console
const char *appEui = JOINEUI; ///< appEUI retrieve from TTN Console application
const char *appKey = APPKEY;  ///< appKEY rtrieve from TTN Console application

#define loraSerial Serial1
#define debugSerial Serial

// Replace REPLACE_ME with TTN_FP_EU868 or TTN_FP_US915
#define freqPlan TTN_FP_EU868

TheThingsNetwork_HANIoT ttn(loraSerial, debugSerial, freqPlan);

// iotShieldTempSensor temperatureSensor;

void setup()
{
    loraSerial.begin(57600);
    debugSerial.begin(9600);

    // Wait a maximum of 10s for Serial Monitor
    while (!debugSerial && millis() < 10000)
        ;

    debugSerial.println(F("-- STATUS"));
    ttn.showStatus();

    debugSerial.println(F("-- JOIN"));
    ttn.join(devEui, appEui, appKey);
}

void loop()
{
    ///< Loop indication for debugging
    debugSerial.println("-- LOOP");
    helloWorld();

    payloadEncoder encoder;

    // Test 1: initialize test variables
    int id = 2;
    int version = 3;
    bool doorStatus = false;
    bool catchDetect = true;
    bool trapDisplacement = false;
    int batteryStatus = 4;
    int unixTime = 5;

    // Test 1: set test variables
    encoder.set_id(id);                             // Give encoder object the id
    encoder.set_version(version);                   // Give encoder object the version
    encoder.set_doorStatus(doorStatus);             // Give encoder object the doorStatus
    encoder.set_catchDetect(catchDetect);           // Give encoder object the catchDetect
    encoder.set_trapDisplacement(trapDisplacement); // Give encoder object the trapDisplacement
    encoder.set_batteryStatus(batteryStatus);       // Give encoder object the batteryStatus
    encoder.set_unixTime(unixTime);                 // Give encoder object the unixTime

    // Test 1: compose payload
    encoder.composePayload();

    uint8_t *payloadBuffer = encoder.getPayload();
    uint8_t payloadSize = encoder.getPayloadSize();

    // Send it off
    ttn.sendBytes(payloadBuffer, payloadSize);

    delay(10000);
}

/// \brief present "knightrider" on leds
void helloWorld(void)
{
    leftRedLED.setState(LED_ON);
    delay(100);
    leftRedLED.setState(LED_OFF);
    leftGreenLED.setState(LED_ON);
    delay(100);
    leftGreenLED.setState(LED_OFF);
    rightRedLED.setState(LED_ON);
    delay(100);
    rightRedLED.setState(LED_OFF);
    rightGreenLED.setState(LED_ON);
    delay(100);
    rightGreenLED.setState(LED_OFF);
    rightGreenLED.setState(LED_ON);
    delay(100);
    rightGreenLED.setState(LED_OFF);
    rightRedLED.setState(LED_ON);
    delay(100);
    rightRedLED.setState(LED_OFF);
    leftGreenLED.setState(LED_ON);
    delay(100);
    leftGreenLED.setState(LED_OFF);
    leftRedLED.setState(LED_ON);
    delay(100);
    leftRedLED.setState(LED_OFF);
}
